#!/usr/bin/env python
# -*- coding: utf8 -*-

import sys
sys.path.append("./src")

from pprint import pprint
import datetime
from FrameTypeInfo import FrameTypeInfo 


DEFAULT_PREFIX = "http://lumii.lv/ontologies/LETA_Frames"
ONTOLOGY_VERSION = '0.1'

def frame_role_target_restrictions(frame_name, role_data):
    return """
        SubClassOf(Annotation(rdfs:comment "%(frame_name)s -- %(role_name_en)s --> %(role_target_class_restrictien_name)s") ObjectSomeValuesFrom(ObjectInverseOf(:%(role_name_en)s) :%(frame_name)s) :%(role_target_class_restrictien_name)s)
""" % {'role_name_en' : role_data['name_en'],
       'frame_name' : frame_name,
       'role_target_class_restrictien_name' : role_data['class_restriction']}


def frame_to_class(frame):
    return """
    Declaration(Class(:%(name_en)s))
        AnnotationAssertion(rdfs:label :%(name_en)s "%(name_en)s"@en)
        AnnotationAssertion(rdfs:label :%(name_en)s "%(name_lv)s"@lv)
        SubClassOf(:%(name_en)s :Frame)

        // role target class restrictions
        %(role_target_restrictions)s

""" % dict(frame.items() + ({'role_target_restrictions' : "".join([frame_role_target_restrictions(frame['name_en'], role) for role in frame['roles'] if role['class_restriction']])}).items())

# FIXME handle latvian entity name "AttiecÄ«bu veids"
def entity_to_class(entity_name):
    return """
    Declaration(Class(:%(entity_name)s))
        SubClassOf(:%(entity_name)s :Entity)
""" % {'entity_name' : entity_name}


def owl_functional_form(frame_type_info):
    return """
Prefix(:=<%(ontology_uri)s#>)
Prefix(xsd:=<http://www.w3.org/2001/XMLSchema#>)
Prefix(rdfs:=<http://www.w3.org/2000/01/rdf-schema#>)

Ontology(<%(ontology_uri)s>
<%(ontology_uri)s/%(ontology_version)s>
    Annotation(owl:versionInfo "autogenerated from frames.xslx on %(current_time)s"^^xsd:string)

    //
    // top level classes
    //

    Declaration(Class(:Entity))

    Declaration(Class(:Frame))

    DisjointClasses(:Entity :Frame)

    //
    // frames
    //

    %(frames)s

    DisjointClasses(%(frame_names)s)


    //
    // entities
    //

    %(entities)s

    //
    // roles
    //

)

""" % {
    'ontology_uri':DEFAULT_PREFIX,
    'ontology_version':ONTOLOGY_VERSION,
    'current_time': str(datetime.datetime.now()),
    'frames': "\n".join([frame_to_class(f) for f in frame_type_info.frames]),
    'frame_names': " ".join([":" + f['name_en'] for f in frame_type_info.frames]),
    'entities': "\n ".join([entity_to_class(entity) for entity in frame_type_info.get_entities()])
    }


def main():
    frame_type_info = FrameTypeInfo()

    ontology_functional_str = owl_functional_form(frame_type_info)

    ONTOLOGY_FUNCTIONAL_TEXT = "./output/frames.owl"

    print "Saving frame ontology in functional syntax to [%s]" % (ONTOLOGY_FUNCTIONAL_TEXT,)
    with open(ONTOLOGY_FUNCTIONAL_TEXT, "w") as outf:
        outf.write(ontology_functional_str.encode('utf8'))

if __name__ == "__main__":
    main()
